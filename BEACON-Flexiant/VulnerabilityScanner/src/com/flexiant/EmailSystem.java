package com.flexiant;

import java.util.Properties;

import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.mail.*;
import javax.mail.internet.*;

public class EmailSystem {
	
	final String username = "beaconvulnerabilityscanner@gmail.com";
	final String emailpassword = "Polka123";
	
	public void sendEmail(String serverUUID, String ip, String emailID) {
		Properties props = new Properties();
		props.put("mail.smtp.auth", "true");
		props.put("mail.smtp.starttls.enable", "true");
		props.put("mail.smtp.host", "smtp.gmail.com");
		props.put("mail.smtp.port", "587");

		Session session = Session.getInstance(props, new javax.mail.Authenticator() {
			protected PasswordAuthentication getPasswordAuthentication() {
				return new PasswordAuthentication(username, emailpassword);
			}
		});
		
		Message message = new MimeMessage(session);
		
		try {
			message.setFrom(new InternetAddress(username));
		
			message.setRecipients(Message.RecipientType.TO,
				InternetAddress.parse("mramannavar@flexiant.com"));
			message.setSubject("BEACON - Vulnerability Scanner Report");
			
			// Create the message part
	        BodyPart messageBodyPart = new MimeBodyPart();
	        // Now set the actual message
	        messageBodyPart.setText("Vulnerability Scanner Report for Server UUID: " + serverUUID + " IP:" + ip);
	        // Create a multipar message
	        Multipart multipart = new MimeMultipart();
	        // Set text message part
	        multipart.addBodyPart(messageBodyPart);
	
	        // Part two is attachment
	        messageBodyPart = new MimeBodyPart();
	        String filename = FCOListener.PATH_TO_REPORTS + ip + ".xml";
	        DataSource source = new FileDataSource(filename);
	        messageBodyPart.setDataHandler(new DataHandler(source));
	        messageBodyPart.setFileName(filename);
	        multipart.addBodyPart(messageBodyPart);
	
	        // Send the complete message parts
	        message.setContent(multipart);
	
	        // Send message
	        Transport.send(message);
	        
		} catch (MessagingException e) {
			
		}
	}
}
