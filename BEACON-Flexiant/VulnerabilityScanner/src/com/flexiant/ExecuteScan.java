package com.flexiant;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;

/**
 * This runnable runs a scan on a VM and gets the report. 
 * The report obtained is stored as a Document and is emailed to the user as an attachment.
 * @author mramannavar
 *
 */
public class ExecuteScan implements Runnable {

	protected static String PATH_TO_REPORTS = "/home/ubuntu/reports";
	private static Logger LOGGER = LogManager.getLogger(ExecuteScan.class);
	private Request request = null;
	
	// Store the report in the same location with name - IP.xml 
    private String storeReport(Document xml, String ip, String cloud) {
    	
    	//Removed date time element for testing
    	SimpleDateFormat dateFormatYear = new SimpleDateFormat("DD-MM-YYYY");
    	SimpleDateFormat dateFormatTime = new SimpleDateFormat("HH-mm-ss");
    	Date date = new Date();
    	String filePath = PATH_TO_REPORTS + "/" + cloud + "/" + dateFormatYear.format(date) + "/" +
    					dateFormatTime.format(date) + "/" + ip + ".xml";
    	LOGGER.info("Report path: " + filePath);
		try {
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource source = new DOMSource(xml);
			File dirs = new File(PATH_TO_REPORTS + "/" + cloud + "/" + dateFormatYear.format(date) + "/" +
					dateFormatTime.format(date));
			dirs.mkdirs();
			StreamResult result = new StreamResult(new File(filePath));
			transformer.transform(source, result);
			
		} catch (TransformerConfigurationException e) {
			e.printStackTrace();
		} catch (TransformerException e) {
			e.printStackTrace();
		}
		return filePath;
    }
    
	public ExecuteScan(Request request) {
		this.request = request;
	}

	@Override
	public void run()  {

        Scanner scanner = new Scanner(request);
        try {
		    String reportId = scanner.startScanning();
		    if (null != reportId) {
		        Document xmlDoc = scanner.getReport(reportId);
		        LOGGER.info("XML document generated");
		        
		        String fileName = storeReport(xmlDoc, request.getIP(), request.getCloud().name());
		        EmailSystem es = new EmailSystem();
		        es.sendTaskSuccessEmail(request.getServerUUID(), fileName, request.getIP(), request.getEmailID());

		        LOGGER.info("After Email sent before Switch");

		        switch (request.getCloud()) {
	            case FLEX: 
			        LOGGER.info("Flex firewall create code");
	            	CreateFCOFirewallTemplate fcofirewallcreate = new CreateFCOFirewallTemplate();
	            	fcofirewallcreate.createfireall(request.getServerUUID(),request.getEmailID(), request.getIP());
	            	break;
	            case OPEN_STACK:  
	            	 break;
	            case OPEN_NEBULA: 
	        	     break;
	                 
	            default:
	            	LOGGER.error("Unable to determine which cloud sent request");
	            	break;
	        }
		    } else {
		    	LOGGER.error("The report could not be generated as the task did not complete");
		    	EmailSystem es = new EmailSystem();
		    	es.sendTaskFailedEmail(request.getServerUUID(), request.getIP(), request.getEmailID());
		    }
        } catch (ScannerException e) {
			LOGGER.error("Something went wrong in scanner", e);
			
		} catch (InterruptedException e) {
			LOGGER.error("Something went wrong with the scanner", e);
			
		} catch (IOException e) {
			LOGGER.error("Failed to get the report", e);
		} 
	}
}
