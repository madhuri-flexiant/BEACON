package com.flexiant;

import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.w3c.dom.Document;;

class Scanner extends ExecuteShellCommand {
	static final String SCANNER_USER = "xxxxx";
	static final String SCANNER_PWD = "xxxxx";
	static final String XML_FORMAT_ID = "a994b278-1f62-11e1-96ac-406186ea4fc5";
	static HashMap<String, String> map;
	Logger LOGGER;
	
	Scanner(HashMap<String, String> map, Logger LOGGER) {
		Scanner.map = map;
		this.LOGGER = LOGGER;
	}
	
	void startScanning() {
		
		String targetID = parseResponse(createTarget());
		String taskID = parseResponse(createTask(targetID));
		
		
	}
	
	private String parseResponse(String response) {
		String statusSubStr = "status=";
		int statusIndex = response.indexOf(statusSubStr);
		String id = "";
		
		String status = response.substring(statusIndex + statusSubStr.length());
		if (Integer.getInteger(status) == 201) {
			LOGGER.log(Level.INFO, "The target has been created");
			String idSubStr = "id=";
			int idIndex = response.indexOf(idSubStr);
			
			id = response.substring(idIndex + idSubStr.length());
			LOGGER.log(Level.INFO, "The result ID is " + id);
		} else {
			LOGGER.log(Level.SEVERE, "Target FAILED to be created");
		}
		
		return id;
	}

	private String createTarget() {
		StringBuilder builder = new StringBuilder();
		builder.append("<create_target>");
		builder.append("<name>");
		builder.append(map.get("IP"));
		builder.append("-");
		builder.append("target</name>");
		builder.append("<hosts>");
		builder.append(map.get("IP"));
		builder.append("</hosts>");
		builder.append("</create_target>");
		
		String cmd = buildCommand( "-X", builder.toString());
		LOGGER.log(Level.INFO, "create target command built: " +  builder.toString());
		String response = executeCommand(cmd);
		LOGGER.log(Level.INFO, "create target response: " + response);
	    return response;
	}
	
	private String createTask(String targetId) {
		StringBuilder builder = new StringBuilder();
		builder.append("<create_task>");
		builder.append("<name>");
		builder.append(map.get("IP"));
		builder.append("-");
		builder.append("task</name>");
		builder.append("<config id>");
		builder.append("\"708f25c4-7489-11df-8094-002264764cea\"/>");
		builder.append("<target id>");
		builder.append(targetId);
		builder.append("/>");
		builder.append("</create_task>");
		
		String cmd = buildCommand( "-X", builder.toString());
		LOGGER.log(Level.INFO, "create target command built: " +  builder.toString());
		String response = executeCommand(cmd);
		LOGGER.log(Level.INFO, "create target response: " + response);
	    return response;
	}
	
	private String startTask(String taskId) {
	    return null;
	}
	
	private String getTask(String taskId) {
	    return null;
	}
	
	private Document getReport(String reportId) {
	    return null;
	}
	
	@Override
	String buildCommand(String option, String arg) {
	    StringBuilder cmdBuilder = new StringBuilder();
	    cmdBuilder.append("omp -u ");
	    cmdBuilder.append(SCANNER_USER);
	    cmdBuilder.append(" -w ");
	    cmdBuilder.append(SCANNER_PWD);
	    cmdBuilder.append(option);
	    cmdBuilder.append(arg);
		return cmdBuilder.toString();
	}
        
}
