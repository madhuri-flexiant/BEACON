package com.flexiant;

import java.io.IOException;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;

class Scanner extends ExecuteShellCommand {
	static final String SCANNER_USER = "xxxxx";
	static final String SCANNER_PWD = "xxxxx";
	static final String XML_FORMAT_ID = "a994b278-1f62-11e1-96ac-406186ea4fc5";
	static HashMap<String, String> map;
	Logger LOGGER;
	
	Scanner(HashMap<String, String> map, Logger LOGGER) {
		Scanner.map = map;
		this.LOGGER = LOGGER;
	}
	
	/**
	 * This method puts together:
	 * create target, create task and start task commands.
	 * It starts a scan on the scanner and waits for the scan to complete.
	 * 
	 * @return
	 * @throws InterruptedException 
	 * @throws IOException 
	 * @throws Exception
	 * If one of the commands fails, the exception is thrown.
	 */
	String startScanning() throws ScannerException {
		String createTargetResp;
		try {
			
			createTargetResp = createTarget();
			
			String targetID = parseResponse(createTargetResp);
			
			String createTaskResp = createTask(targetID);
			String taskID = parseResponse(createTaskResp);
			String reportIDResp = startTask(taskID);
			String reportID = parseResponse(reportIDResp);
			
			if(waitForReport(taskID, reportID)) {
				return reportID;
			}
		} catch (IOException | InterruptedException e) {
			LOGGER.log(Level.SEVERE, "Shell encountered an error: ", e);
		}
		return null;
	}

	private boolean waitForReport(String taskID, String reportID) throws ScannerException {
		boolean complete = false;
		int count = 0;
		
		do {
			try {
				LOGGER.log(Level.INFO, "========================================================");
				LOGGER.log(Level.INFO, "WAITING for Task to complete ");
				// Wait for 5 minutes before checking the status of the task - giving it a chance to finish.
				Thread.sleep(300000); 
				String taskResponse;
				taskResponse = getTasks(taskID);
				if (taskResponse.length() == 0) {
					throw new ScannerException("The get tasks response is empty");
				}
				
				String[] respArr = taskResponse.split(" ");
				String status = null;
				
				for (String str :respArr) {
					// Get the status from the response
					if (str.contains("status=")) {
						String[] statusArr = str.split("=");
						status = statusArr[1].substring(1, 4);
						LOGGER.log(Level.INFO, "The status is " + status);
					}
				}
				// Check for "OK"/"ACCEPTED" status
				if (Integer.parseInt(status) == 200) {
					String[] temp = taskResponse.split("<status>");
					String[] temp1 = temp[1].split("</status>");
					LOGGER.log(Level.INFO, "Task status: " + temp1[0]);
					if (temp1[0].compareToIgnoreCase("Done") == 0) {
						complete = true; //Task has finished
					} 
				}
				
			} catch (IOException | InterruptedException e) {
				LOGGER.log(Level.SEVERE, "Shell encountered an error: ", e);
			}
			count ++;
			
		} while((complete == false) && (count != 2)); // Maximum time given for a task to finish is ~10 minutes
		
		return complete;
	}
	
	//TODD Remove the task/Target/Report from the scanner
	private void cleanScanner() {
		
	}

	/**
	 * Parses the response received from the scanner. 
	 * Checks the status and retrieves the ID.
	 * @param response
	 * @return
	 * @throws ScannerException
	 * If the status is not 201 0r 202, an Exception is thrown
	 */
	private String parseResponse(String response) throws ScannerException {
		if (response.length() == 0) {
			throw new ScannerException("The response is empty");
		}
		String[] respArr = response.split(" ");
		String status = null;
		String id = null;
		for (String str :respArr) {
			// Get the status from the response
			if (str.contains("status=")) {
				String[] statusArr = str.split("=");
				status = statusArr[1].substring(1, 4);
				LOGGER.log(Level.INFO, "The status is " + status);
			}
		}
		// Check for "OK"/"ACCEPTED" status
		if (Integer.parseInt(status) == 201  || Integer.parseInt(status) == 202) {
			if (response.contains("<report_id>")) {
				String[] tempArr1 = response.split("<report_id>");
				String[] tempArr2 = tempArr1[1].split("</report_id>");
				return tempArr2[0];
			}
			// Retrieve the ID
			for (String str :respArr) {
				if (str.contains("id=")) {
					String[] idArr = str.split("=");
					id = idArr[1];
					LOGGER.log(Level.INFO, "The result ID is " + id);
				}
			}
		} else {
			// Other status received.
			LOGGER.log(Level.SEVERE, "Command Error Status: " + status);
			throw new ScannerException("The command executed with errors. Response received: " + response);
		}
		
		return id;
	}
	
	private String createTarget() throws IOException, InterruptedException {
		StringBuilder builder = new StringBuilder();
		builder.append("<create_target>");
		builder.append("<name>");
		builder.append(map.get("IP"));
		builder.append("-");
		builder.append("target</name>");
		builder.append("<hosts>");
		builder.append(map.get("IP"));
		builder.append("</hosts>");
		builder.append("</create_target>");
		
		String cmd = buildCommand("-X", builder.toString());
		String response = executeCommand(cmd);
		LOGGER.log(Level.INFO, "create target command built: " + cmd);
		LOGGER.log(Level.INFO, "create target response: " + response);
		if (response.length() == 0) {
			LOGGER.log(Level.SEVERE, "No Response received from the Scanner");
		}
		return response;
	}
	
	private String createTask(String targetId) throws IOException, InterruptedException {
		StringBuilder builder = new StringBuilder();
		builder.append("<create_task>");
		builder.append("<name>");
		builder.append(map.get("IP"));
		builder.append("-");
		builder.append("task</name>");
		builder.append("<config id=");
		builder.append("\"708f25c4-7489-11df-8094-002264764cea\"/>");
		builder.append("<target id=");
		builder.append(targetId);
		builder.append("/>");
		builder.append("</create_task>");
		
		String cmd = buildCommand( "-X", builder.toString());
		LOGGER.log(Level.INFO, "create task command built: " +  builder.toString());
		String response = executeCommand(cmd);
		LOGGER.log(Level.INFO, "create task response: " + response);
		return response;
	}
	
	private String startTask(String taskId) throws IOException, InterruptedException {
		StringBuilder builder = new StringBuilder();
		builder.append("<start_task ");
		builder.append("task_id=");
		builder.append(taskId);
		builder.append("/>");
		
		String cmd = buildCommand( "-X", builder.toString());
		LOGGER.log(Level.INFO, "start task command built: " +  builder.toString());
		String response = executeCommand(cmd);
		LOGGER.log(Level.INFO, "start task response: " + response);
		return response;
	}
	
	String getReport(String reportId) throws IOException, InterruptedException {
	    StringBuilder builder = new StringBuilder();
	    builder.append("<get_reports");
	    builder.append(" report_id=");
	    builder.append("\"");
	    builder.append(reportId);
	    builder.append("\"");
	    builder.append(" format_id=");      
	    builder.append("\"");
	    builder.append(XML_FORMAT_ID);
	    builder.append("\"/>");
	    
	    String cmd = buildCommand( "-X", builder.toString());
	    LOGGER.log(Level.INFO, "get report command built: " +  builder.toString());
		String response = executeCommand(cmd);
		LOGGER.log(Level.INFO, "get report response: " + response);
		
		return response;
	}
	
	private String getTasks(String taskID) throws IOException, InterruptedException {
		StringBuilder builder = new StringBuilder();
	    builder.append("<get_tasks");
	    builder.append(" task_id=");
	    builder.append(taskID);
	    builder.append("/>");
	    LOGGER.log(Level.FINE, "get tasks input to buildCommand method: " +  builder.toString());
	    String cmd = buildCommand( "-X", builder.toString());
	    LOGGER.log(Level.INFO, "get tasks command built: " +  cmd);
		String response = executeCommand(cmd);
		LOGGER.log(Level.INFO, "get report response: " + response);
		return response;
	}
	
	@Override
	String buildCommand(String option, String arg) {
		StringBuilder cmdBuilder = new StringBuilder();
		cmdBuilder.append("omp -u ");
		cmdBuilder.append(SCANNER_USER);
		cmdBuilder.append(" -w ");
		cmdBuilder.append(SCANNER_PWD);
		cmdBuilder.append(" ");
		cmdBuilder.append(option);
		cmdBuilder.append(" '");
		cmdBuilder.append(arg);
		cmdBuilder.append("'");
		return cmdBuilder.toString();
    }

}
