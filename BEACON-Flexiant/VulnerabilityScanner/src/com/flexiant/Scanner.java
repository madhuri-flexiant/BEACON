package com.flexiant;

import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.w3c.dom.Document;;

class Scanner extends ExecuteShellCommand {
	static final String SCANNER_USER = "xxxxx";
	static final String SCANNER_PWD = "xxxxx";
	static final String XML_FORMAT_ID = "a994b278-1f62-11e1-96ac-406186ea4fc5";
	static HashMap<String, String> map;
	Logger LOGGER;
	
	Scanner(HashMap<String, String> map, Logger LOGGER) {
		Scanner.map = map;
		this.LOGGER = LOGGER;
	}
	
	void startScanning() {
		String createTargetResp = createTarget();
		if (createTargetResp.length() != 0) {
			String targetID = parseResponse(createTargetResp);
			String createTaskResp = createTask(targetID);
			if(createTaskResp != null) {
				String taskID = parseResponse(createTaskResp);
			}
		} else {
			LOGGER.log(Level.SEVERE, "Scanning had to be discontinued because of an error");
		}
	}

	private String parseResponse(String response) {
		String[] respArr = response.split(" ");
		String status = null;
		String id = null;
		for (String str :respArr) {
			if (str.contains("status=")) {
				String[] statusArr = str.split("=");
				status = statusArr[1].substring(1, 4);
				LOGGER.log(Level.INFO, "The status is " + status);
			}
		}
		// TODO if status = 400, .i.e, target already exists - need to find a way to get the task ID
		if (Integer.parseInt(status) == 201) {
			LOGGER.log(Level.INFO, "The target has been created");
			for (String str :respArr) {
				if (str.contains("id=")) {
					String[] idArr = str.split("=");
					id = idArr[1];
					LOGGER.log(Level.INFO, "The result ID is " + id);
				}
			}
		} else {
			LOGGER.log(Level.INFO, "Command Error Status: " + status);
		}
		if (id == null) {
			LOGGER.log(Level.SEVERE, "The Task ID could NOT be retrived");
		}
		return id;
	}

	
	private String createTarget() {
		StringBuilder builder = new StringBuilder();
		builder.append("<create_target>");
		builder.append("<name>");
		builder.append(map.get("IP"));
		builder.append("-");
		builder.append("target</name>");
		builder.append("<hosts>");
		builder.append(map.get("IP"));
		builder.append("</hosts>");
		builder.append("</create_target>");
		
		String cmd = buildCommand( "-X", builder.toString());
		String response = executeCommand(cmd);
		LOGGER.log(Level.INFO, "create target command built: " + cmd);
		LOGGER.log(Level.INFO, "create target response: " + response);
		if (response.length() == 0) {
			LOGGER.log(Level.SEVERE, "No Response received from the Scanner");
		}
		return response;
	}
	
	private String createTask(String targetId) {
		StringBuilder builder = new StringBuilder();
		builder.append("<create_task>");
		builder.append("<name>");
		builder.append(map.get("IP"));
		builder.append("-");
		builder.append("task</name>");
		builder.append("<config id=");
		builder.append("\"708f25c4-7489-11df-8094-002264764cea\"/>");
		builder.append("<target id=");
		builder.append(targetId);
		builder.append("/>");
		builder.append("</create_task>");
		
		String cmd = buildCommand( "-X", builder.toString());
		LOGGER.log(Level.INFO, "create task command built: " +  builder.toString());
		String response = executeCommand(cmd);
		LOGGER.log(Level.INFO, "create task response: " + response);
		return response;
	}
	
	private String startTask(String taskId) {
		StringBuilder builder = new StringBuilder();
		builder.append("<start_task ");
		builder.append("task_id=\"");
		builder.append(taskId);
		builder.append("/>");
		
		String cmd = buildCommand( "-X", builder.toString());
		LOGGER.log(Level.INFO, "start task command built: " +  builder.toString());
		String response = executeCommand(cmd);
		LOGGER.log(Level.INFO, "start task response: " + response);
		return response;
	}
	
	private String getTask(String taskId) {
	    return null;
	}
	
	private Document getReport(String reportId) {
	    return null;
	}
	
	@Override
	String buildCommand(String option, String arg) {
		StringBuilder cmdBuilder = new StringBuilder();
		cmdBuilder.append("omp -u ");
		cmdBuilder.append(SCANNER_USER);
		cmdBuilder.append(" -w ");
		cmdBuilder.append(SCANNER_PWD);
		cmdBuilder.append(" ");
		cmdBuilder.append(option);
		cmdBuilder.append(" '");
		cmdBuilder.append(arg);
		cmdBuilder.append("'");
		return cmdBuilder.toString();
    }

}
