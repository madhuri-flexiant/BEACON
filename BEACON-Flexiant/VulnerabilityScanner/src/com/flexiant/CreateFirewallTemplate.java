package com.flexiant;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.GregorianCalendar;
import java.util.List;

import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.namespace.QName;
import javax.xml.ws.BindingProvider;

import com.extl.jade.user.ExtilityException;
import com.extl.jade.user.FirewallConnectionState;
import com.extl.jade.user.FirewallProtocol;
import com.extl.jade.user.FirewallRule;
import com.extl.jade.user.FirewallRuleAction;
import com.extl.jade.user.FirewallRuleDirection;
import com.extl.jade.user.FirewallTemplate;
import com.extl.jade.user.IpType;
import com.extl.jade.user.Job;
import com.extl.jade.user.ResourceType;
import com.extl.jade.user.UserAPI;
import com.extl.jade.user.UserService;

public class CreateFirewallTemplate {

			static String fcoendpoint = "";

			public  void createfireall(String serverUUID, String emailID, String IP) throws MalformedURLException {
				FCOVMDetails vmdetails = new FCOVMDetails();
				
				vmdetails.vmdetails(serverUUID);
				String clusterUUID = vmdetails.CLUSTERUUID;
				String vdcUUID = vmdetails.VDCUUID;
				
				FCOTokenGenerator tokengenertor = new FCOTokenGenerator();
				try {
					tokengenertor.tokenGenerator(serverUUID);
				} catch (com.extl.jade.admin.ExtilityException e1) {
					System.out.println("Unable to get token for user");
				}
				URL url = null;

				//need to parse required information from scanner report. currently hard coded template will be made
				FirewallTemplate firewalltemplate = new FirewallTemplate();
				FirewallRule firewallout = new FirewallRule();
				FirewallRule firewallin = new FirewallRule();
				int portnumber =22;
				
				firewallout.setName("Test");
				firewallout.setAction(FirewallRuleAction.ALLOW);
				firewallout.setConnState(FirewallConnectionState.ALL);
				firewallout.setDirection(FirewallRuleDirection.OUT);
				//firewallout.setIcmpParam(arg0);
				firewallout.setIpAddress("");
				firewallout.setProtocol(FirewallProtocol.ANY);
				firewallout.setRemotePort(portnumber);

			    url = new URL(com.extl.jade.user.UserAPI.class.getResource("."), 
			    		fcoendpoint);
				
			    // Get the UserAPI
			    UserAPI api = new UserAPI(url,
			            new QName("http://extility.flexiant.net", "UserAPI"));
			    // and set the service port on the service
			    UserService service = api.getUserServicePort();
			     
			    // Get the binding provider
			    BindingProvider portBP = (BindingProvider) service;
			     
			    // and set the service endpoint
			    portBP.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
			    		fcoendpoint);
			     
			    // and the caller's authentication details and password
			    portBP.getRequestContext().put(BindingProvider.USERNAME_PROPERTY,
			    		tokengenertor.tokenID);
			    portBP.getRequestContext().put(BindingProvider.PASSWORD_PROPERTY,
			            "");

			    // Create a firewall template and set required values
			    firewalltemplate.setClusterUUID(clusterUUID);
			    firewalltemplate.setResourceName("Test firewall2.0");
			    firewalltemplate.setResourceType(ResourceType.FIREWALL_TEMPLATE);
			    firewalltemplate.setVdcUUID(vdcUUID);
			    firewalltemplate.setType(IpType.IPV_4);
			    firewalltemplate.setDefaultInAction(FirewallRuleAction.ALLOW);
			    firewalltemplate.setDefaultOutAction(FirewallRuleAction.ALLOW);
			   List<FirewallRule> Firewallruleslist =  firewalltemplate.getFirewallInRuleList();
			   //Adding firewall rules to template
			   Firewallruleslist.add(firewallout);

			    try {
			    	
			         DatatypeFactory datatypeFactory = DatatypeFactory.newInstance();
					Job job = service.createFirewallTemplate(firewalltemplate,null);
					job.setStartTime(datatypeFactory.newXMLGregorianCalendar(new GregorianCalendar()));
					// Wait for the server to be created
					Job response = service.waitForJob(job.getResourceUUID(), true);
					if (response.getErrorCode() == null) {
						System.out.println("Firewall template created successfully");
						//If VM is in running state then we need to stop first then restart
						ApplyFirewallTemplate applyfirewall = new ApplyFirewallTemplate();
						//applyfirewall.applyfirewall(templateUUID, IP, tokengenertor.tokenID);
						//If VM is in running state then we need to stop
					} else {
						System.out.println("Failed to create Firewall. Error: " + 
								response.getErrorCode());
					}
				} catch (ExtilityException | DatatypeConfigurationException e) {
					System.out.println("Exception caught: " + e.getMessage());
				}
			}		
		}