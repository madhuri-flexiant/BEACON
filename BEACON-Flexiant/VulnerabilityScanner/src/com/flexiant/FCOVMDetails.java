package com.flexiant;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.BindingProvider;

import com.extl.jade.admin.Server;
import com.extl.jade.admin.Condition;
import com.extl.jade.admin.FilterCondition;
import com.extl.jade.admin.ResourceType;
import com.extl.jade.admin.SearchFilter;
import com.extl.jade.admin.ListResult;
import com.extl.jade.admin.QueryLimit;
import com.extl.jade.admin.AdminAPI;
import com.extl.jade.admin.AdminService;

public class FCOVMDetails {
	public String VDCUUID ="";
	public String CLUSTERUUID ="";
	public String VMSTATE ="";
	static String fcoendpoint = "";
	static String fcousername = "";
	static String fcopassword = "";
	static String uuid = "";
	
    public  void vmdetails(String serverUUID) throws MalformedURLException {

        AdminService service;
         
        // Get the service WSDL from the server

        URL url = ClassLoader.getSystemClassLoader().getResource(
                "AdminAPI.wsdl");
        // Get the UserAPI
        AdminAPI api = new AdminAPI(url,
                new QName("http://extility.flexiant.net", "AdminAPI"));
                 
        // and set the service port on the service
        service = api.getAdminServicePort();
         
        // Get the binding provider
        BindingProvider portBP = (BindingProvider) service;
         
        // and set the service endpoint

       portBP.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,
    		   fcoendpoint);
         
        // and the caller's authentication details and password
        portBP.getRequestContext().put(BindingProvider.USERNAME_PROPERTY,
        		fcousername + "/" + uuid);
        portBP.getRequestContext().put(BindingProvider.PASSWORD_PROPERTY,
        		fcopassword);
        try {
        // Create an FQL filter and a filter condition
        SearchFilter sf = new SearchFilter();
        FilterCondition fc = new FilterCondition();
         
        // set the condition type
        fc.setCondition(Condition.IS_EQUAL_TO);
         
        // the field to be matched
        fc.setField("resourceuuid");
         
        // and a list of values
        fc.getValue().add(serverUUID);
         
        // Add the filter condition to the query
        sf.getFilterConditions().add(fc);
         
        // Set a limit to the number of results
        QueryLimit lim = new QueryLimit();
        lim.setMaxRecords(10);

        // Call the service to execute the query
        ListResult result;
		result = service.listResources(sf, lim, ResourceType.SERVER);

        // Iterate through the results   
        for(Object o : result.getList()) {
            Server s = ((Server)o);
            VDCUUID = s.getVdcUUID();
            CLUSTERUUID =  s.getClusterUUID();
            VMSTATE = s.getStatus().toString();
        }
        
        } catch (Exception e) {
            
            e.printStackTrace();
        }
    }
}