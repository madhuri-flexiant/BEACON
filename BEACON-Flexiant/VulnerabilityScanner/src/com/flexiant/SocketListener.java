package com.flexiant;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.concurrent.ArrayBlockingQueue;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;

/**
 * This class listens to the Socket and spawns another thread - ScanRequestHandler to handle the connection.
 * @author mramannavar
 *
 */
public class SocketListener implements Runnable {
	
    private ServerSocket listener = null;
    private Socket socket = null;
    
	private static ArrayBlockingQueue<Request> queue = null;
	
    private static Logger LOGGER = LogManager.getLogger(SocketListener.class);
    private Clouds cloud;
    
    public SocketListener(Clouds cloud, ArrayBlockingQueue<Request> queue) {
    	try {
			listener = new ServerSocket(cloud.getPort(), 15); // Backlog is set to 15, should be enough.
			SocketListener.queue = queue;
			this.cloud = cloud;
		} catch (IOException e) {
			LOGGER.fatal("Could not connect to the socket, port number: " + cloud.getPort(), e);
		}
    }
    
	@Override
	public void run() {
		LOGGER.debug("Runnable has been called; Port is: " + cloud.getPort());
        
        do {
        	try {
	        	socket  = listener.accept();
	            ScanRequestHandler handler = new ScanRequestHandler(socket, queue, cloud);
	            
	            Thread requestHandlerThread = new Thread(handler);
	            requestHandlerThread.start();
        	} catch (IOException e) {
        		LOGGER.fatal("Error in socket connection ", e); 	
        	}
        } while (true);
	}
	
	void shutdown() {
		try {
			if (socket != null) {
        		socket.close();
        	}
        	if (listener != null) {
        		listener.close();
        	}
    	} catch (IOException e) {
    		LOGGER.fatal("Failed to close connection", e);
		}
	}
}

