package com.flexiant;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.HashMap;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;

public class FCOListener {
    private static FCOListener instance  = new FCOListener();;
    private static ServerSocket listener = null;
	private static final int PORT = 8341;
    protected static String PATH_TO_REPORTS = "/home/ubuntu/reports/";
    
    private static Logger LOGGER = LogManager.getLogger(FCOListener.class);
    
    private FCOListener() {
        
    }

    public static FCOListener getInstance() {
    	try {
            listener = new ServerSocket(PORT);
        } catch (IOException e) {
        	LOGGER.fatal("Bind Issues", e);
        }
        return instance;
    }
    
    // Store the report in the same location with name - IP.xml 
    private void storeReport(Document xml, String ip) {
    	String file = PATH_TO_REPORTS + ip + ".xml";
    	
		try {
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource source = new DOMSource(xml);
			StreamResult result = new StreamResult(new File(file));
			transformer.transform(source, result);
			
		} catch (TransformerConfigurationException e) {
			e.printStackTrace();
		} catch (TransformerException e) {
			e.printStackTrace();
		}
    }
    
    public synchronized void readFromSocket() {
        Socket socket = null;
        InputStream inStream = null;
        OutputStream outStream = null;

        try {
//            socket = listener.accept();
//            ObjectInputStream ois = new ObjectInputStream(socket.getInputStream());
//            HashMap<String, String> map = (HashMap<String, String>) ois.readObject();
         
        	HashMap<String, String> map = new HashMap<String, String>();
        	map.put("ServerUUID","8fab34cb-2550-34cc-a777-9618373d12b7"); 
        	map.put("IP","109.231.121.81"); 
        	map.put("EmailID","madhuri.flexiant@gmail.com"); 
        	
            Scanner scanner = new Scanner(map);
            String reportId = scanner.startScanning();
            Document xmlDoc = scanner.getReport(reportId);
            LOGGER.info("XML document generated");
            
            storeReport(xmlDoc, map.get("IP"));
            EmailSystem es = new EmailSystem();
            es.sendEmail(map.get("ServerUUID"), map.get("IP"), map.get("EmailID"));
            
        } catch (FileNotFoundException e) {
        	LOGGER.fatal("File Path not found ", e);
        	
        } catch (IOException e) {
        	LOGGER.fatal("Error in socket connection ", e);
        	
//        } catch (ClassNotFoundException e) {
//        	LOGGER.fatal("Error - Class not found ", e);
			
		} catch (ClassCastException e) {
			LOGGER.fatal("Error - Class Cast Exception ", e);
			
		} catch (ScannerException e) {
			LOGGER.fatal("Something went wrong in scanner", e);
			
		} catch (InterruptedException e) {
			LOGGER.fatal("Something went wrong with the scanner", e);
			
		} finally {
        	try {
	        	if (outStream != null) {
					outStream.close();
	        	}
	        	if (inStream != null) {
	        		inStream.close();
	        	}
	        	if (socket != null) {
	        		socket.close();
	        	}
	        	if (listener != null) {
	        		listener.close();
	        	}
        	} catch (IOException e) {
        		LOGGER.fatal("Failed to close connection", e);
			}
        }
    }
}

