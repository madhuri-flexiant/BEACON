package com.flexiant;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.w3c.dom.Document;

public class FCOListener {
    private static FCOListener instance  = new FCOListener();;
    private static ServerSocket listener = null;
	private static final int PORT = 8341;
    private static Logger LOGGER;

    private FCOListener() {
        
    }

    public static FCOListener getInstance(Logger logger) {
    	LOGGER = logger;
    	try {
            listener = new ServerSocket(PORT);
        } catch (IOException e) {
        	LOGGER.log(Level.SEVERE, "Bind Issues", e);
        }
        return instance;
    }

    public synchronized void readFromSocket() {
        Socket socket = null;
        InputStream inStream = null;
        OutputStream outStream = null;

        try {
            socket = listener.accept();
            ObjectInputStream ois = new ObjectInputStream(socket.getInputStream());
            HashMap<String, String> map = (HashMap<String, String>) ois.readObject();
         
            Scanner scanner = new Scanner(map, LOGGER);
            String reportId = scanner.startScanning();
            Document xmlDoc = scanner.getReport(reportId);
            LOGGER.log(Level.FINE, "XML document generated");
            
        } catch (FileNotFoundException e) {
        	LOGGER.log(Level.SEVERE, "File Path not found ", e);
        	
        } catch (IOException e) {
        	LOGGER.log(Level.SEVERE, "Error in socket connection ", e);
        	
        } catch (ClassNotFoundException e) {
        	LOGGER.log(Level.SEVERE, "Error - Class not found ", e);
			
		} catch (ClassCastException e) {
			LOGGER.log(Level.SEVERE, "Error - Class Cast Exception ", e);
			
		} catch (ScannerException e) {
			LOGGER.log(Level.SEVERE, "Something went wrong in scanner", e);
			
		} catch (InterruptedException e) {
			LOGGER.log(Level.SEVERE, "Something went wrong with the scanner", e);
			
		} finally {
        	try {
	        	if (outStream != null) {
					outStream.close();
	        	}
	        	if (inStream != null) {
	        		inStream.close();
	        	}
	        	if (socket != null) {
	        		socket.close();
	        	}
	        	if (listener != null) {
	        		listener.close();
	        	}
        	} catch (IOException e) {
        		LOGGER.log(Level.SEVERE, "Failed to close connection", e);
			}
        }
    }
}

